
#######################################################################################################################################
#######################################################################################################################################
########################################## Initialise User Variables -- Change Values Accordingly #####################################
#######################################################################################################################################
#######################################################################################################################################

length = 13 # number of chars missing from seed 

#######################################################################################################################################
#######################################################################################################################################
############################################### Initialise Program Variables -- Do Not Change #########################################
#######################################################################################################################################
#######################################################################################################################################

#Character set and reverse dictionary Variables
chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ9' # All possibilities for IOTA seed
rdict = dict([ (x[1],x[0]) for x in enumerate(chars) ]) # define reverse lookup dict. This gives number values to the possible characters in the seed. 

#######################################################################################################################################
#######################################################################################################################################
############################################## Get The Seed Index Value -- Do Not Change ##############################################
#######################################################################################################################################
#######################################################################################################################################

def get_index(string_value):
	sum = 0 #set sum equal to zero.
	for i in range(0, length): #create a loop between 0 and length (in this situation length is equal to 13 so loop will go up to 12)
		if i == length-1: #if loop reaches the last character in the string
			sum = sum + rdict[string_value[i]] + 1 #add the value of that character to the sum 
		else:
			sum += ((rdict[string_value[i]])) * (27**(length-i-1)) #add the value of that character to the sum 
	return sum

#######################################################################################################################################
#######################################################################################################################################
################################################################# Program Start #######################################################
#######################################################################################################################################
#######################################################################################################################################

file = open("log.txt","r") #Open file. 
file_seed_value = file.read() #read the file contents.
print ("Seed found. Previously have " + file_seed_value) 
file.close() #Close the file to save changes. 
seed_product_string = file_seed_value[-length:]
print ("The previous variable part of the seed value was: " + seed_product_string)
print (get_index(seed_product_string))



